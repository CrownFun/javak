    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>5.4.0.Final</version>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.23</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-entitymanager</artifactId>
            <version>5.2.12.Final</version>
        </dependency>
    </dependencies>




<?xml version="1.0" encoding="utf-8"?>																								
<!DOCTYPE hibernate-configuration PUBLIC																				
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <!-- Create table if not exists -->
        <property name="hibernate.hbm2ddl.auto">update</property>
        <!-- The JDBC driver of your database -->
        <property name="hibernate.connection.driver_class">org.h2.Driver</property>
        <!-- Indicate the database to generate suitable SQL -->
        <property name="hibernate.dialect">org.hibernate.dialect.H2Dialect</property>
        <!-- The JDBC URL to the database instance -->
        <!-- SERVER: jdbc:h2:tcp://localhost/~/h2database/restful-notes -->
        <!-- EMBEDDED: jdbc:h2:~/h2database/restful-notes -->
        <!-- IN MEMORY: jdbc:h2:mem:restful-notes-test -->
        <property name="hibernate.connection.url">jdbc:h2:tcp://localhost/~/h2database/test1</property>
        <!-- The database username -->
        <property name="hibernate.connection.username">sa</property>
        <!-- The database password -->
        <property name="hibernate.connection.password" />
        <!-- Mapping class -->
        <mapping class="com.filewicz.grzegorz.hibernate.model.Human" />
    </session-factory>
</hibernate-configuration>




<?xml version="1.0" encoding="UTF-8"?>																																				
<!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN" "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
  <session-factory>
       <property name="hibernate.hbm2ddl.auto">update</property>
      <property name="hibernate.dialect">org.hibernate.dialect.H2Dialect</property>
    <property name="hibernate.connection.driver_class">org.h2.Driver</property>
    <property name="hibernate.connection.url">jdbc:h2:tcp://localhost/~/h2database/test4</property>
    <property name="hibernate.connection.username">sa</property>
    <property name="hibernate.show_sql">true</property>
      <mapping class="main.mavenee1.model.Movie" />
  </session-factory>
</hibernate-configuration>


<?xml version="1.0" encoding="UTF-8"?>																																					
<!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN" "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
  <session-factory>
       <property name="hibernate.hbm2ddl.auto">create</property>
        <property name="hibernate.dialect">org.hibernate.dialect.MariaDBDialect</property>
   <property name="hibernate.connection.driver_class">com.mysql.jdbc.Driver</property>
    <property name="hibernate.connection.url">jdbc:mysql://localhost:3306/testowa?UseUnicode=true&amp;characterEncoding=utf8</property>
    <property name="hibernate.connection.username">root</property>
    <property name="hibernate.show_sql">true</property>
    <property name="hibernate.connection.CharSet">utf8</property>
<property name="hibernate.connection.characterEncoding">utf8</property>
<property name="hibernate.connection.useUnicode">true</property>
      <mapping class="model.Movie" />
  </session-factory>
</hibernate-configuration>


<persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence
             http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"
             version="2.1">
    <persistence-unit name="myPersistenceUnit"
                          transaction-type="RESOURCE_LOCAL">
        <properties>
            <property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost:3306/jpa?UseUnicode=true&amp;characterEncoding=utf8" />
            <property name="javax.persistence.jdbc.user" value="root" />
            <property name="javax.persistence.jdbc.password" value="" />
            <property name="javax.persistence.jdbc.driver" value="com.mysql.jdbc.Driver" />
            <property name="javax.persistence.schema-generation.database.action"
                                  value="drop-and-create"/>
        </properties>
    </persistence-unit>
</persistence>

public class HibernateUtil {
    
    private static final SessionFactory SESSION_FACTORY;
    
    static{
        
        StandardServiceRegistryBuilder registryBuilder = new StandardServiceRegistryBuilder().configure("hibernate.cfg.xml");
        StandardServiceRegistry registry = registryBuilder.build();
        MetadataBuilder metadataBuilder = new MetadataSources(registry).getMetadataBuilder();
        Metadata metaData = metadataBuilder.build();
        SESSION_FACTORY =  metaData.getSessionFactoryBuilder().build();
    }
    
    public static SessionFactory getSessionFactory(){
        return SESSION_FACTORY;
    }
}

   public static void read() {
        session = sessionFactory.openSession();
        Transaction transaction = null;
        try {
            CriteriaBuilder builder = session.getCriteriaBuilder();
            CriteriaQuery<Human> query = builder.createQuery(Human.class);
            Root<Human> root = query.from(Human.class);
	    query.select(root); - pobranie szystkich
           query.select(root).where(builder.lessThan(root.get("age"), 20));                          
            query.select(root).where(builder.like(root.get("name"),"%de%"));                        
           query.orderBy(builder.asc(root.get("age")));                                             
            List<Human> result = session.createQuery(query).getResultList();
            result.forEach(System.out::println);
        } catch (Exception e) {
            e.printStackTrace();
        }

		
		@Configuration
@EnableTransactionManagement
public class JpaConfig {

	   @Bean
	    public LocalSessionFactoryBean sessionFactory() {
	        LocalSessionFactoryBean sessionFactory = new LocalSessionFactoryBean();
	        sessionFactory.setDataSource(dataSource());
	        sessionFactory.setPackagesToScan("pl.filewicz.jpa.model");
	        sessionFactory.setHibernateProperties(hibernateProperties());
	 
	        return sessionFactory;
	    }
	 
	    @Bean
	    public DataSource dataSource() {
	        BasicDataSource dataSource = new BasicDataSource();
	        dataSource.setDriverClassName("com.mysql.jdbc.Driver");
	        dataSource.setUrl("jdbc:mysql://localhost:3306/testowa?UseUnicode=true&amp;characterEncoding=utf8");
	        dataSource.setUsername("root");
	        dataSource.setPassword("");
	 
	        return dataSource;
	    }
	 
	    @Bean
	    public PlatformTransactionManager hibernateTransactionManager() {
	        HibernateTransactionManager transactionManager
	          = new HibernateTransactionManager();
	        transactionManager.setSessionFactory(sessionFactory().getObject());
	        return transactionManager;
	    }
	 
	    private final Properties hibernateProperties() {
	        Properties hibernateProperties = new Properties();
	        hibernateProperties.setProperty(
	          "hibernate.hbm2ddl.auto", "create");
	        hibernateProperties.setProperty(
	          "hibernate.dialect", "org.hibernate.dialect.MariaDBDialect");
	 
	        return hibernateProperties;
	    }

}
@Repository
public class KlientDao {

    private SessionFactory sessionFactory;

    @Autowired
    public KlientDao(EntityManagerFactory factory) {
        if (factory.unwrap(SessionFactory.class) == null) {
            throw new NullPointerException("factory is not a hibernate factory");
        }
        this.sessionFactory = factory.unwrap(SessionFactory.class);
    }

    public KlientDao() {
    }

    public void saveKient(Klient klient) {
        Session session = sessionFactory.openSession();
        Transaction tx = session.beginTransaction();
        tx.rollback();
        tx.begin();
        session.persist(klient);
        tx.commit();

        session.close();

    }
	
	    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>
    <dependencies>
             <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>5.4.0.Final</version>
        </dependency>
           <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.23</version>
        </dependency>
        	<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>5.2.12.Final</version>
		</dependency>
    </dependencies>